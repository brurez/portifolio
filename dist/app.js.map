{"version":3,"sources":["../src/app.js"],"names":["app","set","join","__dirname","registerPartials","use","skip","get","json","urlencoded","extended","static","process","env","NODE_ENV","req","res","next","err","Error","status"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,MAAMA,MAAM,wBAAZ;;AAEAA,IAAIC,GAAJ,CAAQ,OAAR,EAAiB,eAAKC,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA0B,OAA1B,CAAjB;AACAH,IAAIC,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;AACA,cAAIG,gBAAJ,CAAqB,eAAKF,IAAL,CAAUC,SAAV,EAAqB,OAArB,EAA8B,UAA9B,CAArB;;AAEAH,IAAIK,GAAJ,CAAQ,sBAAO,KAAP,EAAc;AACpBC,QAAM,MAAMN,IAAIO,GAAJ,CAAQ,KAAR,MAAmB;AADX,CAAd,CAAR;AAGAP,IAAIK,GAAJ,CAAQ,qBAAWG,IAAX,EAAR;AACAR,IAAIK,GAAJ,CAAQ,qBAAWI,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAV,IAAIK,GAAJ,CAAQ,SAAR,EAAmB,kBAAQM,MAAR,CAAe,eAAKT,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,QAA3B,CAAf,CAAnB;AACAH,IAAIK,GAAJ,CAAQ,UAAR,EAAoB,kBAAQM,MAAR,CAAe,eAAKT,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,cAA3B,CAAf,CAApB;;AAEA;AACAH,IAAIK,GAAJ,CAAQ,GAAR;;AAEA,IAAIO,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EACE,sBAAOd,GAAP;;AAEF;AACAA,IAAIK,GAAJ,CAAQ,CAACU,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC1B,QAAMC,MAAM,IAAIC,KAAJ,CAAU,WAAV,CAAZ;AACAD,MAAIE,MAAJ,GAAa,GAAb;AACAH,OAAKC,GAAL;AACD,CAJD;;kBAMelB,G","file":"app.js","sourcesContent":["import express from 'express';\r\nimport path from 'path';\r\nimport logger from 'morgan';\r\nimport bodyParser from 'body-parser';\r\nimport hbs from 'hbs';\r\nimport reload from 'reload';\r\n\r\nimport routes from './routes';\r\n\r\nconst app = express();\r\n\r\napp.set('views', path.join(__dirname, '..','views'));\r\napp.set('view engine', 'hbs');\r\nhbs.registerPartials(path.join(__dirname, 'views', 'partials'));\r\n\r\napp.use(logger('dev', {\r\n  skip: () => app.get('env') === 'test'\r\n}));\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use('/public', express.static(path.join(__dirname, '..', 'public')));\r\napp.use('/scripts', express.static(path.join(__dirname, '..', 'node_modules')));\r\n\r\n// Routes\r\napp.use('/', routes);\r\n\r\nif( process.env.NODE_ENV !== 'production' )\r\n  reload(app);\r\n\r\n// Catch 404 and forward to error handler\r\napp.use((req, res, next) => {\r\n  const err = new Error('Not Found');\r\n  err.status = 404;\r\n  next(err);\r\n});\r\n\r\nexport default app;\r\n"]}